{"version":3,"sources":["Components/Button/index.tsx","Components/Input/index.tsx","Components/ToDoItem/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Container","Styled","div","props","backgroundColor","hoverColor","Label","Button","label","onClick","InputBox","input","Input","placeholder","value","onChange","event","target","ToDoItem","onDelete","ToDoListContainer","InputContainer","Contents","App","useState","toDo","setToDo","toDoList","setToDoList","map","item","index","list","console","log","splice","deleteToDo","text","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAUMA,EAAYC,IAAOC,IAAV,2OAOS,SAACC,GAAD,OAASA,EAAMC,mBAGrB,SAACD,GAAD,OAAUA,EAAME,cAK5BC,EAAQL,IAAOC,IAAV,mEAYEK,EAAS,SAAC,GAKT,IAJZC,EAIW,EAJXA,MAIW,IAHXJ,uBAGW,MAHO,UAGP,MAFXC,kBAEW,MAFE,UAEF,EADXI,EACW,EADXA,QAEA,OAEE,aADA,CACCT,EAAD,CAAWI,gBAAiBA,EAAiBC,WAAYA,EAAYI,QAASA,EAA9E,SAEE,cAACH,EAAD,UAAQE,OC5CRE,EAAWT,IAAOU,MAAV,0JAgBDC,EAAQ,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,YAAaC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,SAC1C,OACE,cAACL,EAAD,CAAUI,MAAOA,EAAOD,YAAaA,EAAaE,SAAU,SAACC,GAC1B,oBAAbD,GACNA,EAASC,EAAMC,OAAOH,WCbpCd,EAAYC,IAAOC,IAAV,8IAQTI,EAAQL,IAAOC,IAAV,mFAMEgB,EAAW,SAAC,GAAgC,IAA9BV,EAA6B,EAA7BA,MAAOW,EAAsB,EAAtBA,SAC9B,OACI,eAAC,EAAD,WACI,cAAC,EAAD,UAAQX,IACR,cAAC,EAAD,CACIA,MAAM,eACNJ,gBAAgB,UAChBC,WAAW,UACXI,QAASU,QC3BnBC,EAAoBnB,IAAOC,IAAV,gJAOjBmB,EAAiBpB,IAAOC,IAAV,8CAIdF,EAAYC,IAAOC,IAAV,iLASToB,EAAWrB,IAAOC,IAAV,gMA+CCqB,MAtCf,WAAe,MAEWC,mBAAS,IAFpB,mBAENC,EAFM,KAEAC,EAFA,OAGmBF,mBAAmB,IAHtC,mBAGNG,EAHM,KAGIC,EAHJ,KAqBb,OACC,cAAC,EAAD,UACE,eAACN,EAAD,WACE,cAACF,EAAD,UAGGO,EAASE,KAAI,SAACC,EAAKC,GAAN,OACf,cAAC,EAAD,CAAqBvB,MAAOsB,EAAMX,SAAU,kBAf/B,SAACY,GAClB,IAAIC,EAAI,YAAOL,GAEfM,QAAQC,IAAI,YAAaF,EAAKG,OAAOJ,EAAM,IAC3CH,EAAYI,GAWyCI,CAAWL,KAA7CD,QAElB,eAACT,EAAD,WACC,cAAC,EAAD,CAAOP,MAAOW,EAAMZ,YAAY,4DAAeE,SAAU,SAACsB,GAAD,OAASX,EAAQW,MAD3E,IACoF,cAAC,EAAD,CAAQ7B,MAAM,eAAKC,QAzB1F,WACXgB,IACDQ,QAAQC,IAAI,iBAAZ,YAAiCP,IACjCC,EAAY,GAAD,mBAAKD,GAAL,CAAeF,KAC1BC,EAAQ,iBC9BCY,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d142b1a1.chunk.js","sourcesContent":["\nimport React from 'react';\nimport Styled from 'styled-components';\n\ninterface ContainerProps {\n  readonly backgroundColor: string;\n  readonly hoverColor: string;\n}\n\n//ContainerProps> 제네릭 타입선언 / 동적매개변수를 사용하여 부모컴포너트로부터 전달받은 값을 설정\nconst Container = Styled.div<ContainerProps>` \n  text-align: center;\n  background-color: #304FFE;\n  padding: 10px 20px;\n  border-radius: 8px;\n  cursor: pointer;\n  &:hover {\n    background-color: ${(props)=>props.backgroundColor};\n  }\n  &:active {\n    box-shadow: ${(props)=> props.hoverColor};\n  }\n`;\n\n\nconst Label = Styled.div`\n  color: #FFFFFF;\n  font-size: 16px;\n`;\n\ninterface Props{\n  readonly label: string;\n  readonly backgroundColor?: string;\n  readonly hoverColor?: string;\n  readonly onClick?: () => void;\n}\n\nexport const Button = ({\n  label,\n  backgroundColor = '#304FFE',\n  hoverColor = '#1E40FF',\n  onClick,\n}: Props) => {\n  return (\n    // 무조건 컴포넌트들은 props를 받을수 있다 그래서 위에 인터페이스로 선언해서 받았다,이벤트는 Container 컴포넌트 인터페이스에 따로 인터페이스하지않았따\n    <Container backgroundColor={backgroundColor} hoverColor={hoverColor} onClick={onClick}> \n    {/* 버튼 컴포넌트는위에서 디폴트로 받았기때문에 구조분할할당에 초기값을 받고 Container처럼 따로 안받아도된다. 받는데이터들은 인터페이스 Props에 다 선언한다 */}\n      <Label>{label}</Label>\n    </Container>\n  );\n};","import React from 'react';\nimport Styled from 'styled-components';\n\nconst InputBox = Styled.input`\n  flex: 1;\n  font-size: 16px;\n  padding: 10px 10px;\n  border-radius: 8px;\n  border: 1px solid #BDBDBD;\n  outline: none;\n`;\n\ninterface Props {\n    readonly placeholder?: string;\n    readonly value?: string;\n    readonly onChange?: (text: string) => void;\n}\n\n\nexport const Input = ({ placeholder, value, onChange }:Props) => {\n  return (\n    <InputBox value={value} placeholder={placeholder} onChange={(event)=>{\n                if(typeof onChange === 'function'){\n                    onChange(event.target.value);\n                }\n            }\n    }/>\n  );\n};\n","import React from 'react';\nimport Styled from 'styled-components';\nimport { Button } from 'Components/Button';\n\n\ninterface Props {\n    readonly label: string;\n    readonly onDelete?: () => void;\n}\n\nconst Container = Styled.div`\n  display: flex;\n  border-bottom: 1px solid #BDBDBD;\n  align-items: center;\n  margin: 10px;\n  padding: 10px;\n`;\n\nconst Label = Styled.div`\n  flex: 1;\n  font-size: 16px;\n  margin-right: 20px;\n`;\n//자식컴포넌트들은 부모에서 받을 데이터의 변수들을 정의 한다. 안받을건 본인스스로 데이터셋을하고\nexport const ToDoItem = ( {label, onDelete}: Props ) => {\n    return (\n        <Container>\n            <Label>{label}</Label>\n            <Button     //props\n                label=\"삭제\"\n                backgroundColor=\"#FF1744\"\n                hoverColor=\"#F01440\"\n                onClick={onDelete}\n            />\n        </Container>\n    );\n}\n","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport Styled from 'styled-components';\nimport { Button, Input, ToDoItem } from 'Components';\n\nconst ToDoListContainer = Styled.div`\n  min-width: 350px;\n  height: 400px;\n  overflow-y: scroll;\n  border: 1px solid #BDBDBD;\n  margin-bottom: 20px;\n`;\nconst InputContainer = Styled.div`\n  display: flex;\n`;\n\nconst Container = Styled.div`\n  min-height: 100vh;\n  background-color: #EEEEEE;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n`;\n\nconst Contents = Styled.div`\n  display: flex;\n  background-color: #FFFFFF;\n  flex-direction: column;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.2);\n`;\n\nfunction App() {\n  // 배열[0]: 데이터 초기값이 들어간 변수,배열[1]: 데이터를 수정할수있는 Set함수\n  const [toDo, setToDo] = useState(''); //동적으뢰 변경할 데이터 선언('')데이터초기값\n  const [toDoList, setToDoList] = useState<string[]>([]);\n  //변수를 수정하기 위한 set함수를 필요한 곳에서 사용\n  //useState를 사용하여 할당받은 변수는 불견값이다 따라서 해당 값은 직접 수정하는 것이 불가능하며 해당 값을 변경하기 위해서는 반드시 set함수를 사용해야한다.\n  const addToDo = ():void =>{\n    if(toDo){\n      console.log('###...toDoList',[...toDoList]);\n      setToDoList([...toDoList, toDo]);\n      setToDo('');\n    }\n  }\n  const deleteToDo = (index: number): void =>{\n    let list = [...toDoList];\n    //list.splice(index,1);\n    console.log('###splice', list.splice(index,1));\n    setToDoList(list);\n  }\n//부모한테 porps를 받는다는건 App이 부모니 App파일의 리턴부분의 컴포너트 태그안에 데이터를 넣는다는것이 부모가자식한테 props를주는내용\n//\n  return (\n   <Container>\n     <Contents>\n       <ToDoListContainer>\n       {/* props는 부모 컴포넌트에서 자식컴포넌트로 전달되는 데이터이다 부모에서 자식으로 데이터 전달할때는 자식 컴포넌트에 porps(속성 프로퍼티)로 넘겨준다. */}\n       {/* 자식컴포넌트에 props가 정의되있으면 여기도 정의해줘여한다  안하면 빨간줄 */}\n        { toDoList.map((item,index) => \n        <ToDoItem key={item} label={item} onDelete={()=> deleteToDo(index)}/>)}\n     </ToDoListContainer>\n     <InputContainer>\n      <Input value={toDo} placeholder=\"할 일을 입력해 주세요\" onChange={(text)=> setToDo(text)}/> <Button label=\"추가\" onClick={addToDo}/>\n     </InputContainer>\n     </Contents>\n   </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}